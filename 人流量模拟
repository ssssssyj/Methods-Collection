import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# === 1. 数据输入 ===
# 类似地点的采样数据（general流量）
sampled_traffic_location1 = np.array([20, 25, 22, 18, 30])
sampled_traffic_location2 = np.array([15, 18, 20, 17, 22])
sampling_rate = 0.02  # 采样率

# 活动相关性
activity_interest_min = 0.04  # 活动相关性最低值
activity_interest_max = 0.05  # 活动相关性最高值

# 预测地点的相关性权重
location_specific_weight = 0.7
general_weight = 0.3

# 模拟次数
n_simulations = 1000

# === 2. 推断类似地点的总人流量 ===
def estimate_total_traffic(sampled_traffic, sampling_rate):
    return sampled_traffic / sampling_rate

# 推断总人流量
total_traffic_location1 = estimate_total_traffic(sampled_traffic_location1, sampling_rate)
total_traffic_location2 = estimate_total_traffic(sampled_traffic_location2, sampling_rate)

# 综合类似地点流量（加权平均）
general_baseline_traffic = (
    np.mean(total_traffic_location1) * general_weight +
    np.mean(total_traffic_location2) * general_weight
)

# === 3. 模拟预测地点的流量 ===
# 基准人流量
baseline_traffic = general_baseline_traffic * (1 - location_specific_weight) 

# 活动相关调整因子
activity_adjustment = np.random.uniform(
    low=activity_interest_min, 
    high=activity_interest_max, 
    size=n_simulations
)

# 预测地点的总人流量
predicted_traffic = baseline_traffic * (1 + activity_adjustment)

# === 4. 结果分析 ===
# 汇总结果
results = pd.DataFrame({
    'Baseline Traffic': np.full(n_simulations, baseline_traffic),
    'Activity Adjustment': activity_adjustment,
    'Predicted Traffic': predicted_traffic
})

print("预测地点流量统计描述:")
print(results.describe())

# === 5. 可视化 ===
# 总人流量分布
plt.hist(results['Predicted Traffic'], bins=30, alpha=0.7, label='Predicted Traffic')
plt.axvline(results['Predicted Traffic'].mean(), color='red', linestyle='dashed', linewidth=1, label='Mean Traffic')
plt.xlabel('Predicted Traffic')
plt.ylabel('Frequency')
plt.title('Predicted Traffic Distribution')
plt.legend()
plt.show()
